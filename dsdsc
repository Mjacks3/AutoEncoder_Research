import os, sys, argparse,json, time, subprocess
#from src.etl import ETL
import xlrd

#Processing work to get repos for training data by docker file and non dockerfile 
xl_workbook = xlrd.open_workbook("repos_properties_sorted.xlsx")
sheet_names = xl_workbook.sheet_names()
#print('Sheet Names', sheet_names) 

xl_sheet = xl_workbook.sheet_by_name(sheet_names[0]) # Full list 
#xl_sheet = xl_workbook.sheet_by_name(sheet_names[1]) # Docker-filtered


for row_idx in range(2, xl_sheet.nrows -2):    # Iterate through rows
    #if "" != xl_sheet.cell(row_idx, 10).value.strip(): #Train Data

            """
            #Get Missing Repos
            gitname = xl_sheet.cell(row_idx, 0).value 
            dataname = gitname.split("/")[-1]
            giturl = "https://github.com/" + gitname

            if  os.path.exists("experiment/train/"+dataname):
                #os.makedirs("experiment/train/"+dataname)
                print(dataname)

                for r, d, f in os.walk("experiment/train/"+dataname):
                    print(f)
                    if f == []:
                        etl = ETL(itype='git',iloc=giturl, token=None)
                        etl.run()
                        statement = 'MATCH (n)-[r]->(m) RETURN r' # For now, we only uses edges
                        ret = etl.graph_query(statement)['edges']
                        print(ret)
                        with open("experiment/train/"+dataname+"/"+dataname+".txt", 'w+') as f:

                            for edge in ret:
                                if edge['type'] != 'FILESYSTEM':
                                    f.write(str(edge['start_node']['id']) + " "+  str(edge['end_node']['id']) +" "+ str(edge['properties']['degree']) + "\n" ) 


                        etl.clean_db() 
     

            #Train Dataset
            gitname = xl_sheet.cell(row_idx, 0).value 
            dataname = gitname.split("/")[-1]
            giturl = "https://github.com/" + gitname


            if not os.path.exists("experiment/train/"+dataname):
                os.makedirs("experiment/train/"+dataname)


                etl = ETL(itype='git',iloc=giturl, token=None)
                etl.run()
                statement = 'MATCH (n)-[r]->(m) RETURN r' # For now, we only uses edges
                ret = etl.graph_query(statement)['edges']

                with open("experiment/train/"+dataname+"/"+dataname+".txt", 'w+') as f:

                    for edge in ret:
                        if edge['type'] != 'FILESYSTEM':
                            f.write(str(edge['start_node']['id']) + " "+  str(edge['end_node']['id']) +" "+ str(edge['properties']['degree']) + "\n" ) 

                etl.clean_db() 


            #Test DataSet
            """

            #Test Dataset
            gitname = xl_sheet.cell(row_idx, 0).value 
            dataname = gitname.split("/")[-1]
            giturl = "https://github.com/" + gitname


            if not os.path.exists("experiment/test/"+dataname):
                os.makedirs("experiment/test/"+dataname)


                etl = ETL(itype='git',iloc=giturl, token=None)
                etl.run()
                statement = 'MATCH (n)-[r]->(m) RETURN r' # For now, we only uses edges
                ret = etl.graph_query(statement)['edges']

                with open("experiment/test/"+dataname+"/"+dataname+".txt", 'w+') as f:

                    for edge in ret:
                        if edge['type'] != 'FILESYSTEM':
                            f.write(str(edge['start_node']['id']) + " "+  str(edge['end_node']['id']) +" "+ str(edge['properties']['degree']) + "\n" ) 

                etl.clean_db() 
            #Test DataSet





